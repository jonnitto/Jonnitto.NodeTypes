prototype(NT:Button) < prototype(NT:InlineEditableLink) {
	isContentElement = true

	@context {
		prevIsButton = ${q(node).prev().is('[instanceof Jonnitto.NodeTypes:Button]')}
		nextIsButton = ${q(node).next().is('[instanceof Jonnitto.NodeTypes:Button]')}
		wrapClass = ${this.isOnDocument ? this.containerFluid ? configJonnittoNodeTypes.containerFluid : configJonnittoNodeTypes.container : false}
		cacheCollection = ${q(node).next().add(q(node).prev())}
	}

	attributes.class {
		container >
		btn = ${configJonnittoNodeTypes.Button.defaultClassName}
		style = Fusion:Array {
			tagStyle = NT:PropertyFromConfigIfNotSet {
				property = 'tagStyle'
				configuration = 'Button.defaultStyle'
				prepend = 'btn'
			}
			outline =  NT:BooleanProperty {
				property = 'outline'
				prepend = '-'
			}
		}
		alignment = NT:WrapIfPropertyIsSet {
			property = 'alignment'
		}
		link {
			prepend = 'btn-link'
		}
	}

	@cache {
		mode = 'cached'

		entryIdentifier {
			node = ${node}
		}

		entryTags {
			1 = ${'Node_' + node.identifier}
			2 = ${'DescendantOf_' + node.identifier}
			3 = ${Neos.Caching.nodeTag(cacheCollection)}
		}
	}

	@process.wrapper = Fusion:Case {
		hasGroup {
			condition = ${prevIsButton || nextIsButton}
			renderer = Fusion:Case {
				isFirst {
					condition = ${!prevIsButton && nextIsButton}
					renderer = Fusion:Array {
						tag = Fusion:Tag {
							omitClosingTag = true
							attributes.class = Fusion:RawArray {
								group = ${configJonnittoNodeTypes.Button.groupClassName}
								wrapClass = ${wrapClass}
							}
						}
						firstButton = ${value}
					}
				}
				isLast {
					condition = ${prevIsButton && !nextIsButton}
					renderer = ${value + '</div>'}
				}
				inBetweeen {
					condition = true
					renderer = ${value}
				}
			}
		}

		needWrapClass {
			condition = ${!!wrapClass}
			renderer = ${'<div class="' + wrapClass + '">' + value + '</div>'}
		}


		default {
			condition = true
			renderer = ${value}
		}
	}


	@if.ValidLink = NT:ValidLinkOrBackend
}
