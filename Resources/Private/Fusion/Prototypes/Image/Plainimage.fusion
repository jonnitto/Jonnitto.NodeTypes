prototype(NT:Plainimage) < prototype(Fusion:Value) {
	property = ${property ? property : 'image'}
	title = ${title ? title : 'title'}
	alternativeText = ${alternativeText ? alternativeText : 'alternativeText'}
	asset = ${q(node).property(this.property)}
	checkRatio = true
	additionalClass = false

	maximumWidth = NT:PropertyFromConfigIfNotSet {
		property = 'maximumWidth'
		configuration = 'Image.maximumWidth'
	}
	maximumHeight = ${Configuration.setting('Jonnitto.NodeTypes.Image.maximumHeight')}
	width = null
	height = null
	allowCropping = false
	allowUpScaling = false


	@context {
		asset = ${this.asset}
		titleText = ${this.title ? q(node).property(this.title) : false}
		altText = ${this.alternativeText ? q(node).property(this.alternativeText) : false}
		maximumWidth = ${this.maximumWidth}
		maximumHeight = ${this.maximumHeight}
		width = ${this.width}
		height = ${this.height}
		allowCropping = ${this.allowCropping}
		allowUpScaling = ${this.allowUpScaling}
		checkRatio = ${this.checkRatio}
		additionalClass = ${this.additionalClass}
	}

	value = Fusion:Case {
		isInlineSVG {
			condition = ${(asset && Configuration.setting('Jonnitto.NodeTypes.Image.inlineSVG') && asset.resource.fileextension == 'svg') ? true : false}
			renderer = NT:FileContent {
				resource = ${asset.resource}
			}
		}
		default {
			condition = true
			renderer = Fusion:Tag {
				ratio = Fusion:Case {
					roundValue = ${Math.min(Math.max(Math.round(asset.width / 25), 1), 50)}
					@context {
						width = ${Math.ceil(asset.width / this.roundValue)}
						height = ${Math.ceil(asset.height / this.roundValue)}
					}
					@ignoreProperties = ${['roundValue']}

					isSquare {
						condition = ${width == height}
						renderer = ${'square'}
					}
					isLandscape {
						condition = ${width > height}
						renderer = 'landscape'
					}
					isPortrait {
						condition = ${width < height}
						renderer = 'portrait'
					}
				}
				@context {
					dummyImage = ${node.context.inBackend && !asset}
					ratio = ${this.ratio}
				}

				prototype(ImageUri) {
					multiplicator = 1
					asset = ${asset}
					allowCropping = ${allowCropping}
					allowUpScaling = ${allowUpScaling}
					maximumWidth = ${width ? null : maximumWidth * this.multiplicator}
					maximumHeight = ${height ? null : maximumHeight * this.multiplicator}
					width = ${width * this.multiplicator}
					height = ${height * this.multiplicator}
				}

				@ignoreProperties = ${['ratio']}

				tagName = 'img'
				attributes = Fusion:Attributes {
					class = Fusion:RawArray {
						type = ${dummyImage? 'neos-handle' : 'img-plain'}
						ratio = ${'img-' + ratio}
						ratio.@if.checkRatio = ${checkRatio}
						additionalClass = ${additionalClass}
						alignment = NT:WrapIfPropertyIsSet {
							property = 'alignment'
							prepend = 'img-'
						}
					}
					title = ${titleText}
					alt = ${altText}
					src = Fusion:Case {
						hasImage {
							condition = ${asset}
							renderer = ImageUri
						}
						inEditMode {
							condition = true
							renderer = Fusion:ResourceUri {
								package = 'Neos.Neos'
								path = 'resource://Neos.Neos/Public/Images/dummy-image.svg'
							}
						}
					}
					srcset = Fusion:Array {
						prototype(ImageUri) {
							calcW = ${width ? width : maximumWidth}
							calcH = ${height ? height : maximumHeight}
							@process.addResolution = ${',' + value + ' ' + this.multiplicator + 'x'}
							@if.hasEnoughPixel = ${asset.width >= this.calcW * this.multiplicator && asset.height >= this.calcH * this.multiplicator}
						}
						null5 = ImageUri {
							multiplicator = 0.5
							@process.addResolution = ${value + ' 0.5x'}
							@if.hasEnoughPixel = true
						}
						1 = ImageUri {
							@if.hasEnoughPixel = true
						}
						2 = ImageUri {
							multiplicator = 2
						}
						3 = ImageUri {
							multiplicator = 3
						}
						4 = ImageUri {
							multiplicator = 4
						}
						@if.hasAsset = ${asset}
					}
				}
			}
		}
	}

	@if.render = NT:NeededProperties {
		check = ${asset}
	}
}
